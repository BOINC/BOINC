plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

import org.ajoberstar.grgit.Grgit

// Use commit date as version code (valid up to 07/18/2036)
def buildVersionCode() {
    def repo = Grgit.open(currentDir: project.rootDir)
    def head = repo.head()
    def versionCode = head.time
    println "versionCode: " + versionCode
    return versionCode
}

// Derive version name from release tag and add commit SHA1
def buildVersionName() {
    def pattern = /(?<tag>.+)-(?<offset>\d+)-g(?<hash>[0-9a-f]+)/
    def version = '7.19.0 : DEVELOPMENT'
    def isDev = true
    def offset = -1
    def tag = ""

    def repo = Grgit.open(currentDir: project.rootDir)
    def head = repo.head()
    def tagWithOffset = repo.describe(longDescr:true, tags: true)
    def match = (tagWithOffset =~ pattern)

    if(match.hasGroup() && 1L == match.size() && 4L == match[0].size()) {
        offset = match.group('offset')
        tag = match.group('tag')
    }
    if ('0' == offset) {
        pattern = /client_release\/\d+\.\d+\/(?<major>\d+)\.(?<minor>\d+)\.(?<revision>\d+)/
        match = (tag =~ pattern)

        // Sanity checks for tag format
        if (match.hasGroup() && 1L == match.size() && 4L == match[0].size()) {
            def major = match.group('major')
            def minor = match.group('minor')
            def revision = match.group('revision')
            version = "${major}.${minor}.${revision}"
            // Sanity check for tag name
            assert tag == repo.describe(tags: true): "Different tag names detected"
            assert repo.status().clean: "Dirty working tree detected! Preventing release build!"
            isDev = false
        }
    }

    def commit = head.getAbbreviatedId(10)
    def versionName = "${version} (${commit})"
    println "versionName: " + versionName
    if(isDev) {
        println "Warning! Non-release tag or offset found: $tag (offset: $offset)"
        println "Flagging as DEVELOPMENT build..."
    }
    return versionName
}

preBuild.doFirst {
    def configFile = android.sourceSets.main.res.sourceFiles.find { it.name.equals 'configuration.xml' }
    def clientName      = new XmlParser().parse(configFile).string.find { it.@name.equals 'client_name' }.text()
    def clientCabundle  = new XmlParser().parse(configFile).string.find { it.@name.equals 'client_cabundle' }.text()
    def allProjectsList = new XmlParser().parse(configFile).string.find { it.@name.equals 'all_projects_list' }.text()
    def nomedia         = new XmlParser().parse(configFile).string.find { it.@name.equals 'nomedia' }.text()
    def client_config   = new XmlParser().parse(configFile).string.find { it.@name.equals 'client_config' }.text()
    def assets = "src/main/assets/"
    assert file(assets + "arm64-v8a/"   + clientName).exists()
    assert file(assets + "armeabi/"     + clientName).exists()
    assert file(assets + "armeabi-v7a/" + clientName).exists()
    assert file(assets + "x86/"         + clientName).exists()
    assert file(assets + "x86_64/"      + clientName).exists()
    assert file(assets + clientCabundle).exists()
    assert file(assets + allProjectsList).exists()
    assert file(assets + nomedia).exists()
    assert file(assets + client_config).exists()
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "edu.berkeley.boinc"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode buildVersionCode().toInteger()
        versionName buildVersionName()

        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.txt'
        }

        xiaomi_release {
            initWith release
        }

        xiaomi_debug {
            initWith debug
        }
    }

    compileOptions {
        sourceCompatibility '1.8'
        targetCompatibility '1.8'

        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                useJUnitPlatform()
                jacoco {
                    includeNoLocationClasses = true
                    excludes = ['jdk.internal.*']
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    tasks.withType(Test) {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

ext {
    coroutines_version = "1.5.1"
    dagger_version = "2.38"
    lifecycle_version = "2.3.1"
    powermock_version = "2.0.9"
    junit5_version = "5.7.2"
    guava_version = "30.1.1-jre"
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    // androidx dependencies
    implementation "androidx.multidex:multidex:2.0.1"
    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "androidx.fragment:fragment-ktx:1.3.6"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "com.github.bumptech.glide:glide:4.12.0"
    implementation "com.google.android.material:material:1.4.0"
    implementation "com.google.guava:guava:$guava_version"
    implementation "com.squareup.okio:okio:2.10.0"
    implementation "org.apache.commons:commons-lang3:3.12.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // lifecycle dependencies
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // coroutine dependencies
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    // dagger dependencies
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Testing dependencies
    testImplementation "androidx.test:core:1.4.0"
    testImplementation "com.google.guava:guava-testlib:$guava_version"
    testImplementation "junit:junit:4.13.2"
    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation "io.mockk:mockk:1.12.0"

    // powermock dependencies
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"

    // junit dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"
}

repositories {
    mavenCentral()
}
