


                                               GRID ASCII HELPER PROTOCOL 
                                                      FOR BOINC







3.0   BOINC-GAHP COMMANDS

	The following commands can be recognized in BOINC-GAHP as of version 1.0.0
	of the protocol:

		ASYNC_MODE_ON
		ASYNC_MODE_OFF
		COMMANDS
                BOINC_ABORT_JOBS 
                BOINC_FETCH_OUTPUT 
                BOINC_PING 
                BOINC_QUERY_BATCHES 
                BOINC_RETIRE_BATCH 
                BOINC_SELECT_PROJECT 
                BOINC_SET_LEASE 
                BOINC_SUBMIT
                RESPONSE_PREFIX
		QUIT
		RESULTS
		VERSION
     
        Except for the BOINC_SELECT_PROJECT, all these commands are asynchronous. 

3.1   CONVENTIONS AND TERMS USED IN SECTION 3.2

	Below are definitions for the terms used in the sections to follow:

	<CRLF>

		The characters carriage return and line feed (in that
		order), _or_ solely the line feed character.

	<SP>

		The space character.

	line

		A sequence of ASCII characters ending with a <CRLF>.

	Request Line

		A request for action on the part of the GAHP server.

	Return Line
		
		A line immediately returned by the GAHP server upon
		receiving a Request Line.

	Result Line

		A line sent by the GAHP server in response to a RESULTS
		request, which communicates the results of a previous
		asynchronous command Request.

	S: and R:

		In the Example sections for the commands below, the prefix
		"S: " is used to signify what the client sends to the GAHP
		server.   The prefix "R: " is used to signify what the
		client receives from the GAHP server.  Note that the "S: "
		or "R: " should not actually be sent or received.

3.2   BOINC-GAHP COMMAND STRUCTURE

         BOINC-GAHP commands consist of three parts:

	    * Request Line
	    * Return Line
	    * Result Line
	 
	 Each of these "Lines" consists of a variable length character
         string ending with the character sequence <CRLF>.  
	
	 A Request Line is a request from the client for action on the part of
	 the BOINC-GAHP server.  Each Request Line consists of a command code
	 followed by argument field(s).  Command codes are a string of
	 alphabetic characters.  Upper and lower case alphabetic characters
	 are to be treated identically with respect to command codes.  Thus,
	 any of the following may represent the boinc_submit command:
 
                BOINC_SUBMIT
                boinc_submit
                BoInC_sUbMiT

	In contrast, the argument fields of a Request Line are _case
	sensitive_.

	The Return Line is always generated by the server as an immediate
	response to a Request Line.  The first character of a Return Line will
	contain one the following characters:
		S - for Success
		F - for Failure
		E - for a syntax or parse Error
	Any Request Line which contains an unrecognized or unsupported command,
	or a command with an insufficient number of arguments, will generate an
	"E" response.

	The Result Line is used to support commands that would otherwise
        block.  Any BOINC-GAHP command which may require the implementation to block
	on network communication require a "request id" as part of the Request
	Line.  For such commands, the Result Line just communicates if the
	request has been successfully parsed and queued for service by the
	BOINC-GAHP server.  At this point, the BOINC-GAHP server would typically dispatch
	a new thread to actually service the request.  Once the request has
	completed, the dispatched thread should create a Result Line and
	enqueue it until the client issues a RESULT command. As mentioned earlier every command 
        except for BOINC_SELECT_PROJECT follows this procedure.   

3.3   TRANSPARENCY

	Arguments on a particular Line (be it Request, Return, or Result) are
	typically separated by a <SP>.  In the event that a string argument
	needs to contain a <SP> within the string itself, it may be escaped by
	placing a backslash ("\") in front of the <SP> character.  Thus, the
	character sequence "\ " (no quotes) must not be treated as a
	separator between arguments, but instead as a space character within a
	string argument.

3.4   SEQUENCE OF EVENTS

	Upon startup, the BOINC-GAHP server should output to stdout a banner string
	which is identical to the output from the VERSION command without the
	beginning "S " sequence (see example below).  Next, the BOINC-GAHP server
	should wait for a complete Request Line from the client (e.g. stdin).
	The server is to take no action until a Request Line sequence is
	received.

		R: $GahpVersion: 1.0 Mar 14 2017 BOINC\ GAHP $ 
		S: COMMANDS
		R: S ASYNC_MODE_OFF ASYNC_MODE_ON BOINC_ABORT_JOBS BOINC_FETCH_OUTPUT BOINC_PING BOINC_QUERY_BATCHES BOINC_RETIRE_BATCH BOINC_SELECT_PROJECT BOINC_SET_LEASE BOINC_SUBMIT COMMANDS QUIT RESULTS VERSION 
		S: VERSION
		R: S $GahpVersion: 1.0 Mar 14 2017 BOINC\ GAHP $ 
		S: RESULTS
		R: S 0 
		S: QUIT
		R: S

3.4   COMMAND SYNTAX 

	This section contains the syntax for the Request, Return, and Result
	line for each command.

	-----------------------------------------------

	
	COMMANDS

	List all the commands from this protocol specification which are
	implemented by this BOINC-GAHP server.

	+ Request Line:
		
		COMMANDS <CRLF>

	+ Return Line:

		S <SP> <command 1> <SP> <command 2> <SP> ... <command X> <CRLF>


	+ Result Line:
	  
	  	None.

	-----------------------------------------------

	VERSION 

	Return the version string for this GAHP.  The version string follows
	a specified format (see below).  Ideally, the version entire version
	string, including the starting and ending dollar sign ($)
	delimiters, should be a literal string in the text of the GAHP
	server executable.  This way, the Unix/RCS "ident" command can
	produce the version string.

	The version returned should correspond to the version of the
	protocol supported.  

	+ Request Line:

		VERSION <CRLF>

	+ Return Line:

		S <SP> $GahpVesion: <SP> <major>.<minor> <SP> 
		    <build-month> <SP> <build-day-of-month> <SP>
		    <build-year> <SP> <general-descrip> <SP>$ <CRLF>

		* major.minor = for this version of the
		    protocol, use version 1.0.

		* build-month = string with the month abbreviation when
		    this GAHP server was built or released.  Permitted
		    values are: "Jan", "Feb", "Mar", "Apr", "May", "Jun",
		    "Jul", "Aug", "Sep", "Oct", "Nov", and "Dec".

		* build-day-of-month = day of the month when GAHP server
		    was built or released; an integer between 1 and 31
		    inclusive.

		* build-year = four digit integer specifying the year in
		    which the GAHP server was built or released.

		* general-descrip = a string identifying a particular 
		    GAHP server implementation.

	+ Result Line:

		None.

	+ Example:

		S: VERSION
		R: S $GahpVersion: 1.0 Mar 14 2017 BOINC\ GAHP $

	-----------------------------------------------

	ASYNC_MODE_ON
		
	Enable Asynchronous notification when the GAHP server has results
	pending for a client. This is most useful for clients that do not
	want to periodically poll the GAHP server with a RESULTS command.
	When asynchronous notification mode is active, the GAHP server will
	print out an 'R' (without the quotes) on column one when the
	'RESULTS' command would return one or more lines. The 'R' is printed
	only once between successive 'RESULTS' commands.	The 'R' is
	also guaranteed to only appear in between atomic return lines; the
	'R" will not interrupt another command's output.

	If there are already pending results when the asynchronous results
	available mode is activated, no indication of the presence of those
	results will be given. A GAHP server is permitted to only consider
	changes to it's result queue for additions after the ASYNC_MODE_ON
	command has successfully completed. GAHP clients should issue a
	'RESULTS' command immediately after enabling asynchronous
	notification, to ensure that any results that may have been added to
	the queue during the processing of the ASYNC_MODE_ON command are
	accounted for.

	+ Request Line:

		ASYNC_MODE_ON <CRLF>
	
	+ Return Line:
		
		S <CRLF>

		Immediately afterwards, the client should be prepared to
		handle an R <CRLF> appearing in the output of the GAHP
		server.

	+ Result Line:
		
		None.

	+ Example:

		S: ASYNC_MODE_ON
		R: S
                S: BOINC_SELECT_PROJECT https://example.com/project-name/ xxxxxxxxxxxx
                R: S
		S: BOINC_PING 0001
		R: S
                R: R
		S: BOINC_PING 0002
		R: S
		S: RESULTS
		R: S 2
		R: 0001 NULL 
		R: 0002 NULL

	Note that you are NOT guaranteed that the 'R' will not appear
	between the dispatching of a command and the return line(s) of that
	command; the BOINC-GAHP server only guarantees that the 'R' will not
	interrupt an in-progress return. The following is also a legal
	example: 
		S: ASYNC_MODE_ON
		R: S
                S: BOINC_SELECT_PROJECT https://example.com/project-name/ xxxxxxxxxxxx
                R: S
		S: BOINC_PING 0001 
		R: S
		S: BOINC_PING 0002
		R: R	
		R: S
		S: RESULTS
		R: S 2
		R: 0001 NULL 
		R: 0002 NULL 
	
		(Note the reversal of the R and the S after BOINC_PING 0002)

	-----------------------------------------------

	ASYNC_MODE_OFF

	Disable asynchronous results-available notification. In this mode,
	the only way to discover available results is to poll with the
	RESULTS command.  This mode is the default. Asynchronous mode can be
	enable with the ASYNC_MODE_ON command.

	+ Request Line:
	
		ASYNC_MODE_OFF <CRLF> 

	+ Return Line:

		S <CRLF>

	+ Results Line:

		None

	+ Example:

		S: ASYNC_MODE_OFF
		R: S


	-----------------------------------------------

	QUIT

	Free any/all system resources (close all sockets, etc) and terminate
	as quickly as possible.

	+ Request Line:

		QUIT <CRLF>

	+ Return Line:

		S <CRLF>

		Immediately afterwards, the command pipe should be closed
		and the BOINC-GAHP server should terminate.

	+ Result Line:

		None.

	-----------------------------------------------

	RESULTS

	Display all of the Result Lines which have been queued since the
	last RESULTS command was issued.  Upon success, the first return
	line specifies the number of subsequent Result Lines which will be
	displayed.  Then each result line appears (one per line) -- each
	starts with the request ID which corresponds to the request ID
	supplied when the corresponding command was submitted.  The exact
	format of the Result Line varies based upon which corresponding
	Request command was issued.  

	IMPORTANT: Result Lines must be displayed in the _exact order_ in
	which they were queued!!!  In other words, the Result Lines
	displayed must be sorted in the order by which they were placed into
	the BOINC-GAHP's result line queue, from earliest to most recent.

	+ Request Line:

		RESULTS <CRLF>

	+ Return Line(s):

		S <SP> <num-of-subsequent-result-lines> <CRLF>
		<reqid> <SP> ... <CRLF>
		<reqid> <SP> ... <CRLF>
		...

		* reqid = integer Request ID, set to the value specified in
		    the corresponding Request Line.

	+ Result Line:

		None.

	+ Example:

		S: RESULTS
		R: S 1
		R: 100 NULL 

	-----------------------------------------------
        BOINC_SELECT_PROJECT

        Select a project

        + Request Line: 

                BOINC_SELECT_PROJECT <SP> <project url> <SP> <authenticator> <CRLF>

                * project url = the url of the project to which all requests will be sent

                * authenticator = the authenticator of the account on the selected project

        + Return Line:

                <result> <CRLF>

                * result = NULL (success) or error message. 

        + Result Line:

                There is no result line due to the fact that this is a synchronous command
                and the result is displayed in the return line.

        -----------------------------------------------

        BOINC_PING

        Ping the selected project

        + Request Line:

                BOINC_PING <SP> <req id> <CRLF>

                * req id = non-zero integer Request ID 

        + Return Line:

                <result> <CRLF>

                * result = the character "S" (no quotes) for successful
                    submission of the request (meaning that the request is
                    now pending), or an "E" for error on the
                    parse of the request or its arguments (e.g. an
                    unrecognized or unsupported command, or for missing or
                    malformed arguments).

        + Result Line:

                NULL (success) or <err msg>        

        -----------------------------------------------

	BOINC_SUBMIT
	
	Submit a new job batch.

	+ Request Line:
	
		BOINC_SUBMIT <SP> <req id> <SP> <batch name> <SP> <app name>
		    <SP> <#jobs> <SP> <job name> <#args> <arg1> <arg2> ... 
                          <SP> <#input files> <src path> <dst filename> 
                                              ...
                                      ... <CRLF>

		* req id = non-zero integer Request ID 

		* batch name = the name of the batch to be submitted
                  must be unique over all submissions.

                * app name = the name of the application to execute the jobs

		* #jobs = the number of jobs in the batch 
                
                * job name = the name of each job (must be unique over all submissions)
  
                * #args = the number of arguments for each job
 
                * arg<x> = argument to pass to the job

                * #input files = number of input files for each job
 
                * src path = the source path including the filename of the input file
                  (a <dir> argument could be added to prepend to input paths)
          
                * dst filename = the filename of the input file (included in src path)

	+ Return Line:

		<result> <CRLF>

		* result = the character "S" (no quotes) for successful
		    submission of the request (meaning that the request is
		    now pending), or an "E" for error on the
		    parse of the request or its arguments (e.g. an
		    unrecognized or unsupported command, or for missing or
		    malformed arguments).  

	+ Result Line:
			
	
               NULL (success) or <err msg>

	-----------------------------------------------

        BOINC_QUERY_BATCHES
 
        Query the status of the jobs of one or more batches.

        + Request Line:

                BOINC_QUERY_BATCHES <SP> req id> <SP> min_mod_time <SP> #batches <SP> <batch name1> ... <CRLF>

                * req id = non-zero integer Request ID
        
                * min_mod_time = only jobs whose db record has changed since this time are reported
                  (min_mod_time = 0 returns all jobs) 
 
                * #batches = number of batches to be queried

                * <batch name> = the name of each batch


        + Return Line:

                <result> <CRLF>
                
                * result = the character "S" (no quotes) for successful 
                    submission of the request (meaning that the request is
                    now pending), or an "E" for error on the
                    parse of the request or its arguments (e.g. an
                    unrecognized or unsupported command, or for missing or
                    malformed arguments).
      
        + Result Line:

                <err msg> or NULL <SP> server time <SP> <batch size 1> <SP> <job name 1> 
                                  <SP> <status 1> <SP> ... <SP> <batch size 2> <SP> ...

        -----------------------------------------------

        BOINC_FETCH_OUTPUT
  
        Retrieve the outputs of a completed job.

        + Request Line:
   
                BOINC_FETCH_OUTPUT <SP> <req id> <SP> <job name> <SP> <dir> <SP> <stderr filename> <SP>
                                   <mode> <SP>
                                   <#file-specs> <SP>
                                   <src name> <SP> <dst> <SP> 
                                   ... <CRLF>

                * req id = non-zero integer Request ID

                * job name = the job whose output is being fetched

                * dir = directory on the local machine where output files are placed by default

                * mode = ALL or SOME. 
                          If mode = ALL all the jobs output files are fetched.
                          File specs are then applied to rename or move them.
                          If mode = SOME only those output files described by 
                          the file specs are fetched.

                * #file-specs = number of file specs

                * src name = filename written by the job
 
                * dst = specifies where the <src name> file should be placed on the local machine.
                        It can be either an absolute path or a relative path ( whereby <dir> is 
                        prepended ). Any directories within <dst> must already exist.

                * stderr filename = the name of the error log. In case of ERROR status BOINC-GAHP looks 
                                    for an instance for which some information is available (exit status and stderr output).
                                    If there is no such information, an error message is returned. 
                        
        
        + Return Line:

                <result> <CRLF>

                * result = the character "S" (no quotes) for successful 
                    submission of the request (meaning that the request is
                    now pending), or an "E" for error on the
                    parse of the request or its arguments (e.g. an
                    unrecognized or unsupported command, or for missing or
                    malformed arguments).
 
        + Result Line:
 
                <err msg> or NULL <SP> <exit status> <SP> <elapsed time> <CPU time>

        -----------------------------------------------

        BOINC_ABORT_JOBS

        Abort jobs

        + Request Line:
      
                BOINC_ABORT_JOBS <SP> <req id> <SP> <job name> ... <CRLF>

                * req id = non-zero integer Request ID

                * job name = the name of the job being aborted

        + Return Line:

                <result> <CRLF>
 
                * result = the character "S" (no quotes) for successful
                     submission of the request (meaning that the request is
                     now pending), or an "E" for error on the
                     parse of the request or its arguments (e.g. an
                     unrecognized or unsupported command, or for missing or
                     malformed arguments).

        + Result Line:

                <err msg> or NULL

        -----------------------------------------------

        BOINC_RETIRE_BATCH

        Retire a batch 

        + Request Line:

                BOINC_RETIRE_BATCH <SP> <req id> <SP> <batch name> <CRLF>

                * req id = non-zero integer Request ID
 
                * batch name = the name of the batch being retired

        + Return Line:

                <result> <CRLF>
   
                * result = the character "S" (no quotes) for successful
                    submission of the request (meaning that the request is
                    now pending), or an "E" for error on the
                    parse of the request or its arguments (e.g. an
                    unrecognized or unsupported command, or for missing or
                    malformed arguments).

        + Result Line:

                <err msg> or NULL

        ----------------------------------------------

        BOINC_SET_LEASE

        Set the "lease" time for a batch 

        + Request Line:

                BOINC_SET_LEASE <SP> <req id> <SP> <batch name> <new lease time> <CRLF>

                * req id = non-zero integer Request ID

                * batch name = the name of the batch whose lease is being updated

                * new lease time = time after which the batch's files and database records can be deleted

        + Return Line:

                <result> <CRLF>
   
                * result = the character "S" (no quotes) for successful
                    submission of the request (meaning that the request is
                     now pending), or an "E" for error on the
                     parse of the request or its arguments (e.g. an
                     unrecognized or unsupported command, or for missing or
                     malformed arguments).
 
        + Result Line:

                <err msg> or NULL

        ----------------------------------------------

        RESPONSE_PREFIX

	Specify the prefix that the BOINC-GAHP server uses to prepend every subsequent
	line of output with. This may simplify parsing the output of the 
	BOINC-GAHP server by the client program, especially in cases where the responses 
	of more than one BOINC-GAHP server are "collated" together.
	
	This affects the output of both return lines and result lines for all 
	subsequent commands (NOT including the current one).

	+ Request Line:

		RESPONSE_PREFIX <SP> <prefix> <CRLF>

		<prefix> = an arbitrary string of characters which you want to prefix
		every subsequent line printed by the BOINC-GAHP server with.

	+ Return Line:

		<result> <CRLF>

		* result = the character "S" (no quotes) for successful
		    submission of the prefix, or an "E" if this command
		    was malformed.

	+ Result Line:

		None.

	+ Example:

		S: RESPONSE_PREFIX GAHP:
		R: S
		S: RESULTS
		R: GAHP:S 0
		S: RESPONSE_PREFIX NEW_PREFIX_
		R: GAHP:S
		S: RESULTS
		R: NEW_PREFIX_S 0

	-----------------------------------------------
