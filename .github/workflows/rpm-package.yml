name: Rpm-Package

env:
  PKG_PREFIX: boinc
  ARCH: amd64
  MANTAINER: BOINC <***@***.com>
  HOMEPAGE: https://boinc.berkeley.edu/
  DESCRIPTION: BOINC lets you help cutting-edge science research using your computer. The BOINC app, running on your computer, downloads scientific computing jobs and runs them invisibly in the background. It's easy and safe.
  BASEREPO: https://parvit.github.io/boinc # no trailing slash
  # BASEREPO: https://boinc.berkeley.edu/dl/linux # no trailing slash
  GH_REPO_API: parvit/boinc # no trailing or prefix slash
  PUBKEY: boinc.gpg # keep extension

concurrency:
  group: rpm-package
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      release_type:
          description: 'release repository type to generate'
          type: choice
          options:
            - alpha
            - stable
          required: true
      build_run_id:
        description: 'workflow run id to download artifacts, default latest one'
        type: integer
        default: 0
        required: false
      allow_repo_create:
        description: 'Allow to recreate the repo on mirror error'
        type: boolean
        default: false
        required: true
      remove_package:
        description: 'Removes the specified package from the repo'
        type: boolean
        default: false
        required: true

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

run-name: RPM publish [${{ inputs.release_type }}][CanCreate:${{ inputs.allow_repo_create }}][Remove:${{ inputs.remove_package }}]

jobs:
  build:
    name: generate-rpm
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
         os: [38]
         package_type: [linux_client-vcpkg, linux_manager-without-webview]
    environment:
      name: ${{ inputs.release_type }}
    steps:
      - name: Checkout files
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github
          branch: rpm-build
      
      - name: Preparation
        id: prep
        run: |
          {
            echo "===== Step Preparation ====="

            PKG_VERSION=$(cat version.h | grep BOINC_VERSION_STRING | sed -e 's|#define BOINC_VERSION_STRING||' | jq -r .)
            if [[ "${PKG_VERSION}" -eq "" ]]; then
              printf "Could not obtain release package version from version.h"
              exit 1
            fi

            # Setup Environment vars
            PKG_NAME=$(echo "${{ env.PKG_PREFIX }}-${{ matrix.package_type }}" | sed "s|_|-|")
            PKG_CLEAN=$(echo "$PKG_NAME" | sed "s|-vcpkg||")
            PKG_FULL="${PKG_CLEAN}_${PKG_VERSION}-1_${{ env.ARCH }}"

            echo "PKG_VERSION=${PKG_VERSION}" >> $GITHUB_ENV
            echo "PKG_NAME=${PKG_NAME}" >> $GITHUB_ENV
            echo "PKG_CLEAN=${PKG_CLEAN}" >> $GITHUB_ENV
            echo "PKG_FULL=${PKG_FULL}" >> $GITHUB_ENV
            echo "PUBKEY=${{ env.PUBKEY }}" >> $GITHUB_ENV

            echo "Orig. Package name ${PKG_NAME}"
            echo "Package name ${PKG_CLEAN}"
            echo "Package version ${PKG_VERSION}"
            echo "Full name ${PKG_FULL}"
            echo "Key file ${{ env.PUBKEY }}"

            # Setup gpg keys
            echo "${{ secrets.REPO_PRIV_KEY }}" > ${{ github.workspace }}/boinc.priv.key
            echo "${{ secrets.REPO_KEY }}" > ${{ github.workspace }}/boinc.pub.key

            cp "${{ github.workspace }}/boinc.pub.key" "${{ github.workspace }}/${{ env.PUBKEY }}"

            # Setup temp directory for packages
            mkdir pkgs/
            mkdir ${PKG_FULL}

            # setup required packages
            dnf update -y -qq
            dnf install -y rpm rpm-build rpm-sign rpmspectool rpmdevtools

          } &> "${{ github.workspace }}/steps.log"

      - name: DownloadArtifacts
        if: inputs.remove_package == false
        shell: bash
        run: |
          {
            echo "===== Step DownloadArtifacts ====="

            # Downloads artifacts of the latest run
            ID="${{ inputs.build_run_id }}"
            TYPE="${{ matrix.package_type }}"
            if [[ "$ID" -eq "0" ]]; then
              ID=$(curl -s -XGET "https://api.github.com/repos/${GH_REPO_API}/actions/workflows/linux.yml/runs" | jq .workflow_runs[0].id)
            fi
            URL=$(curl -s -XGET "https://api.github.com/repos/${GH_REPO_API}/actions/runs/$ID/artifacts" | jq -r ".artifacts[] | select(.name==\"${TYPE}_\") | .archive_download_url")
            if [[ "$URL" -eq "" ]]; then
              printf "Could not find artifact for ${TYPE} in run ${ID}"
              exit 1
            fi
            wget -O pkgs/${PKG_NAME}.zip -d --header='Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' $URL

          } &>> "${{ github.workspace }}/steps.log"

      - name: CreateRpmFolder
        if: inputs.remove_package == false
        run: |
          {
            echo "===== Step CreateRpmFolder ====="
            bash -x ${{ github.workspace }}/.github/workflows/rpmrepo/prepare_package.sh "${{ matrix.os }}" "${PKG_FULL}" "${PKG_NAME}" "${{ matrix.package_type }}"

          } &>> "${{ github.workspace }}/steps.log"

      - name: CreateRpmDefinition
        if: inputs.remove_package == false
        run: |
          {
            echo "===== Step CreateRpmDefinition ====="

            # Derive the package dependencies for the selected package / os / release combination selected
            cd ${{ github.workspace }}/.github/workflows/rpmrepo/rpmbuild/
            PKG_DEPS=$(bash package_depends.sh ${{ matrix.os }} ${{ matrix.package_type }})
            echo "Dependencies: ${PKG_DEPS}"

            echo """
            Name:           ${PKG}
            Version:        ${PKG_VERSION}
            Release:        1%{?dist}
            BuildArch:      ${{ env.ARCH }}
            
            URL:            ${{ env.HOMEPAGE }}
            Summary:        ${{ env.DESCRIPTION }}
            License:        LGPL3+
            
            Requires:       ${PKG_DEPS}
            
            %description
            ${{ env.DESCRIPTION }}
            
            %prep
            # nothing build is not done here
            
            %build
            # nothing to build
            
            %install
            # no install from build
            
            %files
            """ > SPECS/${PKG}-${VER}.spec
            
            find SOURCES/ -type f | sed -e 's|^./SOURCES/|/|' >> SPECS/${PKG}-${VER}.spec
            
            echo """

            %changelog
            * Sat Jun 17 2023 Super User
            """ >> SPECS/${PKG}-${VER}.spec

            cat SPECS/${PKG}-${VER}.spec
            
          } &>> "${{ github.workspace }}/steps.log"

      - name: FedoraBuildRpmPackage
        if: inputs.remove_package == false && ( matrix.os == '38')
        run: |
          {
            echo "===== Step BuildRpmPackage (Fedora) ====="

            cd ${{ github.workspace }}/.github/workflows/rpmrepo/rpmbuild
            rpmbuild --define "_topdir `pwd`" -v -ba SPECS/*

          } &>> "${{ github.workspace }}/steps.log"

      # - name: OpenSuseBuildRpmPackage
      #   if: inputs.remove_package == false && ( matrix.os == 'bullseye' || matrix.os == 'buster')
      #   run: |
      #     {
      #       echo "===== Step BuildRpmPackage (rpmian) ====="

      #       cd ${{ github.workspace }}/
      #       dpkg-rpm -Zgzip --build "${{ github.workspace }}/${PKG_FULL}"
      #       dpkg-rpm --info "${{ github.workspace }}/${PKG_FULL}.rpm"
      #     } &>> "${{ github.workspace }}/steps.log"

      - name: AddUpdateRepository
        if: inputs.remove_package == false
        run: |
          {
            echo "===== Step AddUpdateRepository ====="
            # Bash scripts do not support boolean values so convert to 0 true / 1 false
            ALLOW_CREATE=1
            if [[ "${{ inputs.allow_repo_create }}" == "true" ]]; then
              ALLOW_CREATE=0
            fi

            # cd ${{ github.workspace }}/.github/workflows/rpmrepo/
            # Updates or creates the repository
            # bash -x repo_update.sh "$ALLOW_CREATE" ${{ env.BASEREPO }} ${{ github.workspace }} ${{ matrix.os }} ${{ inputs.release_type }}

            # useful for debug
            # find ${{ github.workspace }}

          } &>> "${{ github.workspace }}/steps.log"

      - name: RemoveUpdateRepository
        if: inputs.remove_package == true
        run: |
          {
            echo "===== Step RemoveUpdateRepository ====="

            # cd ${{ github.workspace }}/.github/workflows/rpmrepo/
            # bash -x repo_remove.sh "${PKG_FULL}" ${{ env.BASEREPO }} ${{ github.workspace }} ${{ matrix.os }} ${{ inputs.release_type }}

            # useful for debug
            # find ${{ github.workspace }}

          } &>> "${{ github.workspace }}/steps.log"

      - name: Cleanup
        if: always()
        run: |
          {
            echo "===== Step Cleanup ====="
            find .

            # Clean all files secret or not needed
            rm -rf ${{ github.workspace }}/*.key || true
            rm -rf ${{ github.workspace }}/trustedkeys.gpg || true
          } &>> "${{ github.workspace }}/steps.log"

      # archive contains the repository to be uploaded to the boinc server
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: repo-${{ inputs.release_type }}-${{ matrix.os }}
      #     path: "${{ github.workspace }}/repo-${{ inputs.release_type }}-${{ matrix.os }}.tar.gz"

      # archives for reference the public key used (included in the archive published)
      - uses: actions/upload-artifact@v3
        with:
          name: keys
          path: "${{ github.workspace }}/${{ env.PUBKEY }}"

      # Execution logs
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.os }}-steps-logs
          path: "${{ github.workspace }}/steps.log"

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload deploy folder
          path: '${{ github.workspace }}/.github/workflows/rpmrepo/rpmbuild/BUILD'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      # Deployment of the repository for the combination channel / osversion
      # - name: Deploy to boinc server
      #   run: |
      #       set -e
      #       curl \
      #         -s --fail --write-out "%{http_code}" \
      #         -F 'upload_file=@${{ github.workspace }}/repo-${{ inputs.release_type }}-${{ matrix.os }}.tar.gz' \
      #         https://boinc.berkeley.edu/upload.php --cookie "auth=${{ secrets.BOINC_AUTH }} " \
      #         --form "submit=on"
